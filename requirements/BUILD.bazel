load("@rules_uv//uv:pip.bzl", "pip_compile")
load("@pip//:requirements.bzl", "all_whl_requirements")
load("@rules_python_gazelle_plugin//manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python_gazelle_plugin//modules_mapping:def.bzl", "modules_mapping")

# This rule fetches the metadata for python packages we depend on. That data is
# required for the gazelle_python_manifest rule to update our manifest file.
modules_mapping(
    name = "modules_map",
    wheels = all_whl_requirements,
)

gazelle_python_manifest(
    name = "gazelle_python_manifest",
    manifest = "//:gazelle_python.yaml",
    modules_mapping = ":modules_map",
    pip_repository_name = "pip",
    requirements = "//requirements:all.txt",
)

pip_compile(
    name = "runtime",
    requirements_in = "//:pyproject.toml",
    requirements_txt = "runtime.txt",
)

# A single constraint-solution for the full monorepo.
# Allows dependencies between different applications without risk of version skew.
# NB: this can easily become overconstrained. It's okay to have applications opt-out.
# they can use virtual deps in rules_py in complex cases.
pip_compile(
    name = "requirements.all",
    data = [
        "runtime.txt",
        "test.in",
        "//logger/cli:requirements.txt",
        "//oci_python_image:requirements.txt",
        "//py_mypy:requirements.txt",
        "//tools/mypy:requirements.txt",
    ],
    requirements_in = "all.in",
    requirements_txt = "all.txt",
)
