load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("@build_bazel_rules_nodejs//:index.bzl", "js_library")
load("//bazel/rules_nodejs:defs.bzl", "ts_project")
load("//bazel:rules_nodejs_to_rules_js_adapter.bzl", "rules_nodejs_to_rules_js_adapter")

# A ts_project from rule_nodejs
ts_project(
    name = "a_transpile",
    srcs = ["index.ts"],
    declaration = True,
    tsconfig = "//:tsconfig",
    visibility = ["//visibility:public"],
    deps = [
        # Internal //packages/ rules_nodejs deps
        "//packages/a/src",
        # Depend on @types/is-odd rules_nodejs npm package from yarn_install
        "@npm//@types/is-odd",
    ],
)

# A js_library from rules_nodejs to link this package to @example/pkg-a under rules_nodejs
js_library(
    name = "a_rnjs",
    package_name = "@example/pkg-a",
    srcs = ["package.json"],
    visibility = ["//visibility:public"],
    deps = [":a_transpile"],
)

# Adapt the outputs from rules_nodejs `ts_project` to a rules_js `js_library` so it can be used as a
# dependency in downstream rules_js targets.
rules_nodejs_to_rules_js_adapter(
    name = "a_rjs",
    deps = [":a_transpile"],
)

# The rules_js linkable package must be the default target in the package by convention of
# npm_translate_lock
npm_package(
    name = "a",
    srcs = [
        "package.json",
        ":a_rjs",
    ],
    visibility = ["//visibility:public"],
)
