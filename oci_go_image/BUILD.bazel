load("@aspect_bazel_lib//lib:testing.bzl", "assert_archive_contains")
load("@container_structure_test//:defs.bzl", "container_structure_test")
load("@rules_go//go:def.bzl", "go_binary", "go_library", "go_test")
load("@rules_img//img:image.bzl", "image_index", "image_manifest")
load("@rules_img//img:load.bzl", "image_load")
load("@rules_img//img:push.bzl", "image_push")
load("@tar.bzl", "mutate", "tar")

go_library(
    name = "oci_go_image_lib",
    srcs = ["main.go"],
    importpath = "github.com/aspect-build/bazel-examples/oci_go_image",
    visibility = ["//visibility:private"],
    deps = ["@com_github_google_go_cmp//cmp"],
)

go_test(
    name = "oci_go_image_test",
    size = "small",
    srcs = ["main_test.go"],
    embed = [":oci_go_image_lib"],
)

go_binary(
    name = "app",
    embed = [":oci_go_image_lib"],
    visibility = ["//visibility:public"],
)

# Put app go_binary into a tar layer.
tar(
    name = "app_layer",
    srcs = [":app"],
    out = "app_layer.tar",
    mutate = mutate(strip_prefix = package_name() + "/app_"),
)

# Prove that the application is at the path we expect in that tar.
assert_archive_contains(
    name = "test_app_layer",
    archive = "app_layer.tar",
    expected = ["app"],
)

image_manifest(
    name = "_image",
    # This is defined by an oci.pull() call in /MODULE.bazel
    base = "@distroless_base",
    entrypoint = ["/app"],
    # Link the resulting image back to the repository where the build is defined.
    labels = {
        "org.opencontainers.image.source": "https://github.com/aspect-build/bazel-examples",
    },
    layers = [":app_layer"],
)

# This is the target that should be released to the target platform
image_index(
    name = "image",
    manifests = [":_image"],
    platforms = [
        "@rules_go//go/toolchain:linux_arm64",
        "@rules_go//go/toolchain:linux_amd64",
    ],
)

# $ bazel run //oci_go_image:load
# $ docker run --rm gcr.io/example:latest
#   string(
# -       "Hello World",
# +       "Hello Go",
#   )
image_load(
    name = "load",
    # Use the image built for the target platform
    image = ":image",
    tag = "gcr.io/example:latest",
)

container_structure_test(
    name = "test",
    configs = ["test.yaml"],
    # Use the image built for the target platform as it runs through docker
    image = ":transitioned_image",
    tags = [
        "no-remote-exec",
        "requires-docker",
    ],
)

image_push(
    name = "push",
    image = ":image",
    registry = "ttl.sh",
    repository = "/aspect-build/oci_go_image_example",
    tags = [
        "24h",
        "latest",
    ],
)
