load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@rules_go//go:def.bzl", "go_binary", "go_library")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_tarball", "structure_test")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

go_library(
    name = "app_lib",
    srcs = ["main.go"],
    importpath = "example.com/custom_registry/app",
    visibility = ["//visibility:private"],
    deps = ["@com_github_google_go_cmp//cmp"],
)

go_binary(
    name = "app",
    embed = [":app_lib"],
    visibility = ["//visibility:public"],
)

# Put app go_binary into a tar layer.
pkg_tar(
    name = "app_layer",
    srcs = [":app"],
    # If the binary depends on RUNFILES, uncomment the attribute below.
    # include_runfiles = True
)

# Image using a Chainguard base image with libc
oci_image(
    name = "chainguard_dynamic_image",
    architecture = select({
        "@platforms//cpu:arm64": "arm64",
        "@platforms//cpu:x86_64": "amd64",
    }),
    base = "@chainguard_dynamic_base",
    entrypoint = ["/app"],
    os = "linux",
    tars = [":app_layer"],
)

# Image using a Chainguard static base image (smaller)
oci_image(
    name = "chainguard_static_image",
    architecture = select({
        "@platforms//cpu:arm64": "arm64",
        "@platforms//cpu:x86_64": "amd64",
    }),
    base = "@chainguard_static_base",
    entrypoint = ["/app"],
    os = "linux",
    tars = [":app_layer"],
)

oci_image(
    name = "image",
    architecture = select({
        "@platforms//cpu:arm64": "arm64",
        "@platforms//cpu:x86_64": "amd64",
    }),
    base = "@distroless_base",
    entrypoint = ["/app"],
    os = "linux",
    tars = [":app_layer"],
)

# This is the target that should be released to the target platform
platform_transition_filegroup(
    name = "transitioned_image",
    srcs = [":image"],
    target_platform = select({
        "@platforms//cpu:arm64": "@rules_go//go/toolchain:linux_arm64",
        "@platforms//cpu:x86_64": "@rules_go//go/toolchain:linux_amd64",
    }),
)

# $ bazel build app:tarball
# $ docker load --input $(bazel cquery --output=files tarball)
# $ docker run --rm gcr.io/example:latest
#   string(
# -       "Hello World",
# +       "Hello Go",
#   )
oci_tarball(
    name = "tarball",
    # Use the image built for the exec platform rather than the target platform
    image = ":image",
    repotags = ["gcr.io/example:latest"],
)

# $ bazel build app:chainguard_tarball
# $ docker load --input $(bazel cquery --output=files chainguard_tarball)
# $ docker run --rm chainguard_example:latest
oci_tarball(
    name = "chainguard_dynamic_tarball",
    # Use the image built for the exec platform rather than the target platform
    image = ":chainguard_dynamic_image",
    repotags = ["chainguard_dynamic_example:latest"],
)

# $ bazel build app:chainguard_static_tarball
# $ docker load --input $(bazel cquery --output=files chainguard_static_tarball)
# $ docker run --rm chainguard_static_example:latest
oci_tarball(
    name = "chainguard_static_tarball",
    # Use the image built for the exec platform rather than the target platform
    image = ":chainguard_static_image",
    # Pinning to a hash is only available to customers
    repotags = ["chainguard_static_example:latest"],
)

structure_test(
    name = "test",
    config = ["test.yaml"],
    # Use the image built for the exec platform rather than the target platform
    image = ":image",
)
