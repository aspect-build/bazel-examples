"Declare dependencies for bzlmod, see https://bazel.build/build/bzlmod"

bazel_dep(name = "rules_python", version = "1.2.0")  # Core Python support
bazel_dep(name = "rules_uv", version = "0.59.0")     # UV for pip compile
bazel_dep(name = "rules_mypy", version = "0.29.0")   # MyPy support, although we'll get mypy via pip

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

# Pull in a Python interpreter
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    python_version = "3.12",
)

# Using that interpreter, fetch our PyPi deps (incl. MyPy)
pip.parse(
    hub_name = "pip",
    python_version = "3.12",
    requirements_lock = "//tools/python:requirements_lock.txt",
)
use_repo(pip, "pip")

# rules_mypy wants to extract the types- and -stubs requirements for its own use, and attempts to
# construct an automated mapping between type packages and the requirements they provide types for
# so that those requirements can be injected for typechecking. We'll use the extracted type mapping
# as part of setting up MyPy.
types = use_extension("@rules_mypy//mypy:types.bzl", "types")
types.requirements(
    name = "pip_types",
    pip_requirements = "@pip//:requirements.bzl",
    requirements_txt = "//tools/python:requirements_lock.txt",
)
use_repo(types, "pip_types")
