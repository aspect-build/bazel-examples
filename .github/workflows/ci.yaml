# Configure plain GitHub Actions to run `bazel` commands on PRs to main as well as commits landed on main.
# This demonstrates one way to do Continuous Integration.
#
# Aspect Workflows is a more feature-rich, powerful, and cheaper approach.
# See the configuration in /.aspect/workflows for how that CI/CD system is configured.
# Note that the root module in this repo is tested on Aspect Workflows, so
# this file only executes tests for the nested sub-modules.
name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # matrix-prep-* steps dynamically generate a bit of JSON depending on whether our action has
  # access to repository secrets. When running on a pull_request from a fork, the author is
  # untrusted so the secret will be absent. Insanely complex for how simple this requirement is...
  # inspired from
  # https://stackoverflow.com/questions/65384420/how-to-make-a-github-action-matrix-element-conditional

  matrix-prep-os:
    # Prepares the 'os' axis of the test matrix
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: linux
        run: echo "os=ubuntu-latest" >> $GITHUB_OUTPUT
      - id: macos
        run: echo "os=macos-latest" >> $GITHUB_OUTPUT
        # Only run on main branch (not PRs) to minimize macOS minutes (billed at 10X)
        # https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions#included-storage-and-minutes
        if: ${{ github.ref == 'refs/heads/main' }}
    outputs:
      # Will look like ["ubuntu-latest", "macos-latest"]
      os: ${{ toJSON(steps.*.outputs.os) }}

  test:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    needs:
      - matrix-prep-os

    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(needs.matrix-prep-os.outputs.os) }}
        folder:
          # FIXME(jbedard): re-enable CI for this folder, currently failing with
          # Error: Cannot find module 'execroot/__main__/bazel-out/darwin_arm64-fastbuild/bin/external/aspect_rules_js/npm/private/lifecycle/node_modules/node-gyp/bin/node-gyp.js'
          # - 'angular'
          - 'angular-ngc'
          - 'bzlmod'
          - 'check-npm-determinism'
          - 'directory_path'
          # TODO: intentionally fails
          # - 'eager-fetch'
          - 'git_push'
          - 'go_workspaces'
          - 'jest'
          - 'nestjs'
          - 'oci_go_image'
          - 'oci_python_image'
          - 'pnpm-workspaces'
          - 'prisma'
          - 'bufbuild'
          # FIXME(jbedard): re-enable CI for this folder, currently failing with
          # Unable to load package for @nodejs_darwin_arm64//:bin/node: The repository '@nodejs_darwin_arm64' could not be resolved: Repository '@nodejs_darwin_arm64' is not defined
          # - 'rules_nodejs_to_rules_js_migration'
          - 'ts_project_transpiler'

    steps:
      - uses: actions/checkout@v3
      - uses: bazel-contrib/setup-bazel@0.8.5
        with:
          repository-cache: true
          bazelrc: |
            common --announce_rc --color=yes
            common --enable_platform_specific_config
            # TODO: bring up a docker or podman container on our macos runners, OR
            # use our testcontainers cloud account to get a remote one.
            test:macos --test_tag_filters=-requires-docker

      - name: Test Type
        id: has_test_sh
        uses: andstor/file-existence-action@v1
        with:
          files: '${{ matrix.folder }}/test.sh'

      - name: test.sh
        working-directory: ${{ matrix.folder }}
        if: steps.has_test_sh.outputs.files_exists == 'true'
        run: ./test.sh
        shell: bash

      - name: bazel test //...
        working-directory: ${{ matrix.folder }}
        if: steps.has_test_sh.outputs.files_exists != 'true'
        run: |
          bazel \
            --bazelrc=$GITHUB_WORKSPACE/.aspect/bazelrc/ci.bazelrc \
            --bazelrc=$GITHUB_WORKSPACE/.github/workflows/ci.bazelrc \
            test //...
