load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@aspect_rules_py//py:defs.bzl", "py_binary", "py_image_layer", "py_library", "py_pytest_main")
load("@container_structure_test//:defs.bzl", "container_structure_test")
load("@pip//:requirements.bzl", "requirement")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_load")

py_library(
    name = "hello_world_lib",
    srcs = [
        "__init__.py",
        "app.py",
    ],
    imports = [".."],
    deps = [
        requirement("cowsay"),
    ],
)

py_binary(
    name = "hello_world",
    srcs = ["__main__.py"],
    imports = [".."],
    main = "__main__.py",
    deps = [":hello_world_lib"],
)

# Construct an image that has three layers.
# The result will look like this:
#    bazel run //hello_world:tarball
#
#2f2353bd5bea: Loading layer [==================================================>]  47.13MB/47.13MB
#f02532d45017: Loading layer [==================================================>]   3.62MB/3.62MB
#9296e9071c11: Loading layer [==================================================>]  16.24kB/16.24kB
py_image_layer(
    name = "layers",
    binary = ":hello_world",
)

oci_image(
    name = "image",
    # This is defined by an oci.pull() call in /MODULE.bazel
    base = "@ubuntu",
    entrypoint = ["/oci_python_image/hello_world/hello_world"],
    tars = [":layers"],
)

# This is defined by an oci.pull() call in /MODULE.bazel

platform(
    name = "aarch64_linux",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

platform(
    name = "x86_64_linux",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

platform_transition_filegroup(
    name = "platform_image",
    srcs = [":image"],
    target_platform = select({
        "@platforms//cpu:arm64": ":aarch64_linux",
        "@platforms//cpu:x86_64": ":x86_64_linux",
    }),
)

# To build the image and load it into it into a local runtime:
# $ bazel run //hello_world:image_load
# $ docker run --rm gcr.io/oci_python_hello_world:latest
oci_load(
    name = "image_load",
    image = ":platform_image",
    repo_tags = ["gcr.io/oci_python_hello_world:latest"],
)

# Use this if you need a tarball:
# $ bazel build //hello_world:image_load.tar
filegroup(
    name = "image_load.tar",
    srcs = [":image_load"],
    output_group = "tarball",
)

container_structure_test(
    name = "test",
    configs = ["test.yaml"],
    image = ":platform_image",
    tags = ["requires-docker"],
)

py_test(
    name = "test_container",
    srcs = ["integration_test.py"],
    # NB: this depends on the image rather than the tarball, to avoid the test needing to wait for
    # an action that reads all bytes of the layers and writes all those bytes again.
    # However, in order for the image to be loaded into the Docker daemon from files on disk,
    # the test Setup has to do some sophisticated work to load each layer.
    data = [":platform_image"],
    main = "integration_test.py",
    tags = [
        "requires-docker",
        # TODO(sahin/derek?): this test passes on GitHub Actions runners but fails on AW
        "skip-on-aspect-workflows",
    ],
    deps = [
        requirement("testcontainers"),
    ],
)

py_pytest_main(
    name = "__test__",
    deps = [
        requirement("coverage"),
        requirement("pytest"),
    ],
)

py_test(
    name = "unit_test",
    size = "small",
    srcs = [
        "app_test.py",
        ":__test__",
    ],
    main = ":__test__.py",
    deps = [
        ":__test__",
        ":hello_world_lib",
    ],
)
